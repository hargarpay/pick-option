/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Selector = /** @class */ (function () {\n    function Selector(config) {\n        var _this = this;\n        if (config === void 0) { config = {}; }\n        this.placeholder = 'Select';\n        this.parentWidthActive = true;\n        this.parentWidth = '100%';\n        /**\n         * @name eventListenerHandler\n         * @param e\n         * @param selectID\n         * @description\n         * Handle the click event of each of the options in the select\n         * element\n         */\n        /**\n         * Use when eventListener need to pass event to a named arrow function\n         * private eventListenerHandler = (e: Event, selectID: string) => (event: Event): void => {\n         */\n        this.eventListenerHandler = function (evt, selectID) {\n            var elemTarget = evt.target;\n            var customSelect = _this.getCurrentSelect(elemTarget);\n            var selectElement = customSelect.nextElementSibling;\n            Array.from(selectElement.querySelectorAll('option')).forEach(function (option, index) {\n                if (elemTarget.getAttribute('data-value') === option.value) {\n                    option.setAttribute('selected', 'selected');\n                    if (\"createEvent\" in document) {\n                        var dispatch = document.createEvent('CustomEvent');\n                        dispatch.initCustomEvent('change', true, false, { value: option.value, label: option.textContent });\n                        selectElement.dispatchEvent(dispatch);\n                    }\n                }\n                else {\n                    if (!_this.checkMultipleAttr(selectElement)) {\n                        option.removeAttribute('selected');\n                    }\n                }\n            });\n            if (_this.checkMultipleAttr(selectElement)) {\n                var selctedOptions = Array.from(selectElement.querySelectorAll('option[selected]'));\n                if (selctedOptions.length > 0) {\n                    var selectedOption_1 = '';\n                    selctedOptions.forEach(function (option) {\n                        selectedOption_1 += \"<span class=\\\"selected\\\" data-label=\\\"\" + option.textContent + \"\\\">\" + option.textContent + \" <span class=\\\"close\\\">x</span></span>\";\n                    });\n                    customSelect.children[0].innerHTML = selectedOption_1;\n                }\n            }\n            else {\n                customSelect.children[0].textContent = elemTarget.textContent;\n            }\n            var searchInput = document.querySelector(\"#\" + selectID + \" .select-item-options input\");\n            _this.rerenderMenuList(selectID, searchInput.value.trim());\n        };\n        this.placeholder = \"placeholder\" in config ? config.placeholder : this.placeholder;\n        this.parentWidthActive = \"parentWidthActive\" in config ? config.parentWidthActive : this.parentWidthActive;\n        this.parentWidth = \"parentWidth\" in config ? config.parentWidth : this.parentWidth;\n        this.createCustomMenu();\n    }\n    /**\n     * @function createCustomMenu\n     * @description grt all select elements that have select-menu-display as class and generate their custom dropdown\n     */\n    Selector.prototype.createCustomMenu = function () {\n        // Get all select element with select-menu-display class\n        var selectMenuDisplay = Array.from(document.querySelectorAll('select.select-menu-display'));\n        if (selectMenuDisplay) {\n            // Close all custom dropdown when click outside;\n            document.addEventListener('click', function (e) {\n                /**\n                 * Check if select-menu and select-item are closest\n                 * to the event target else closes all drop down\n                 */\n                if (e.target.closest(\".select-menu\") === null\n                    && e.target.closest(\".select-item\") === null) {\n                    // Hide the menus.\n                    document.querySelectorAll('.select-menu.active').forEach(function (item) {\n                        item.classList.remove('active');\n                    });\n                }\n            });\n            // Use for...of loop to run through each of the element \n            for (var _i = 0, selectMenuDisplay_1 = selectMenuDisplay; _i < selectMenuDisplay_1.length; _i++) {\n                var menu = selectMenuDisplay_1[_i];\n                // Get all option elements of the current select element\n                var menuOptions = Array.from(menu.querySelectorAll('option'));\n                /**\n                 * Check if the current select element has id\n                 * if it has get the id\n                 * if it does not have generate a unique id\n                 * and append character a to the generate id\n                 * because some generate id might start with number\n                 * which is an invalid variable\n                 */\n                var selectID = menu.getAttribute('id') || \"a\" + Math.random().toString(36).substring(7);\n                // Generate the custom select\n                this.generateCustomMenu(menu, menuOptions, selectID, '', true);\n            }\n        }\n    };\n    // Test function for menu list generator\n    Selector.prototype.testGenerateCustomMenuItems = function (option) {\n        return this.generateCustomMenuItems(option);\n    };\n    // Create the custom menu and display it\n    Selector.prototype.generateCustomMenu = function (menu, options, selectID, value, onload) {\n        if (value === void 0) { value = ''; }\n        if (onload === void 0) { onload = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            var promise, customMenuOptions, currentCustomSelect, selectPlaceholder, selectedOption, placeholder, optionString_1, mulitpleClass, parentElement, parentWidthActive, parentWidth, pwactive, pw, selectItemOptions;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        promise = new Promise(function (resolve, reject) {\n                            var optionsList = '';\n                            var numberOfLength;\n                            var currentSelectValue = _this.getSelectedOptions(menu);\n                            var newOptions = options.filter(function (option) {\n                                return _this.getFilterConditions(currentSelectValue, option, value);\n                            });\n                            numberOfLength = newOptions.length - 1;\n                            if (newOptions.length > 0) {\n                                newOptions.forEach(function (option, index) {\n                                    optionsList += _this.generateCustomMenuItems(option);\n                                    if (numberOfLength === index) {\n                                        resolve(optionsList);\n                                    }\n                                });\n                            }\n                            else {\n                                resolve(optionsList);\n                            }\n                        });\n                        return [4 /*yield*/, promise];\n                    case 1:\n                        customMenuOptions = _a.sent();\n                        currentCustomSelect = document.querySelector(\"div#\" + selectID + \" .select-item-options .wrapper\");\n                        if (currentCustomSelect) {\n                            currentCustomSelect.parentNode.removeChild(currentCustomSelect);\n                        }\n                        if (onload) {\n                            selectPlaceholder = menu.getAttribute('placeholder');\n                            selectedOption = this.checkMultipleAttr(menu)\n                                ? Array.from(menu.querySelectorAll('option[selected]'))\n                                : menu.querySelector('option[selected]');\n                            placeholder = void 0;\n                            if (selectedOption !== null) {\n                                if (Array.isArray(selectedOption)) {\n                                    if (selectedOption.length > 0) {\n                                        optionString_1 = '';\n                                        (selectedOption).forEach(function (option) {\n                                            optionString_1 += \"<span class=\\\"selected\\\" data-label=\\\"\" + option.textContent + \"\\\">\" + option.textContent + \" <span class=\\\"close\\\">x</span></span>\";\n                                        });\n                                        placeholder = optionString_1;\n                                    }\n                                    else {\n                                        placeholder = selectPlaceholder === null ? this.placeholder : selectPlaceholder;\n                                        menu.value = \"\";\n                                    }\n                                }\n                                else {\n                                    placeholder = selectedOption.textContent;\n                                }\n                            }\n                            else {\n                                placeholder = selectPlaceholder === null ? this.placeholder : selectPlaceholder;\n                                menu.value = \"\";\n                            }\n                            mulitpleClass = this.checkMultipleAttr(menu) ? ' multiple' : '';\n                            menu.insertAdjacentHTML('beforebegin', \"\\n                <div class=\\\"select-menu\" + mulitpleClass + \"\\\" id=\\\"\" + selectID + \"\\\">\\n                        <div class=\\\"select-item no-select\\\">\" + placeholder + \"</div>\\n                        <div class=\\\"select-item-options\\\">\\n                            <div class=\\\"select-item\\\">\\n                                <input type=\\\"text\\\" placeholder=\\\"Select Item\\\">\\n                            </div>\\n                            <div class=\\\"wrapper\\\">\\n                                \" + customMenuOptions + \"\\n                            </div>\\n                        </div>\\n                </div>\\n            \");\n                            parentElement = menu.parentElement;\n                            parentWidthActive = menu.getAttribute('data-parent-width-active');\n                            parentWidth = menu.getAttribute('data-parent-width');\n                            pwactive = parentWidthActive === null ? this.parentWidthActive : parentWidthActive === \"true\";\n                            pw = parentWidth === null ? this.parentWidth : parentWidth;\n                            if (pwactive) {\n                                if (parentElement instanceof HTMLElement) {\n                                    parentElement.style.width = pw;\n                                }\n                            }\n                        }\n                        else {\n                            selectItemOptions = document.querySelector(\"div#\" + selectID + \" .select-item-options\");\n                            selectItemOptions.insertAdjacentHTML('beforeend', \"\\n            <div class=\\\"wrapper\\\">\" + customMenuOptions + \"</div>\\n        \");\n                        }\n                        this.addScrollbar(selectID, onload);\n                        if (onload) {\n                            this.addSearchableEvent(selectID);\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Selector.prototype.generateCustomMenuItems = function (option) {\n        var value = option.value;\n        var label = option.textContent;\n        return \"\\n        <div class=\\\"select-item\\\" data-value=\\\"\" + value + \"\\\">\" + label + \"</div>\\n    \";\n    };\n    /**\n     * @name checkMultipleAttr\n     * @param menu\n     * @description\n     * Check if the select element has multiple attribute or not\n     * if it has return `true`\n     * else return `false`\n     */\n    Selector.prototype.checkMultipleAttr = function (menu) {\n        return menu.getAttribute('multiple') !== null;\n    };\n    /**\n     * @name getSelectedOptions\n     * @param menu\n     * @description\n     * Considering selected options of both select with multiple attribute and the select without\n     * if select has mulitple attribute then the selected option will be array of the value i.e `string[]`\n     * else if the selected ooption is empty return `[]`\n     * if the select does not have multiple attribute the value will be a `string`\n     */\n    Selector.prototype.getSelectedOptions = function (menu) {\n        var currentSelectValue;\n        if (this.checkMultipleAttr(menu)) {\n            var selectedOptions = Array.from(menu.querySelectorAll('option[selected]'));\n            if (selectedOptions.length > 0) {\n                currentSelectValue = selectedOptions.map(function (opt) { return opt.value; });\n            }\n            else {\n                currentSelectValue = [];\n            }\n        }\n        else {\n            var selectedOption = menu.querySelector('option[selected]');\n            if (selectedOption !== null) {\n                currentSelectValue = selectedOption.value;\n            }\n            else {\n                currentSelectValue = '';\n            }\n        }\n        return currentSelectValue;\n    };\n    /**\n     * @name getFilterConditions\n     * @param selectedOptions\n     * @param option\n     * @param value\n     * @description\n     * Since two different data types `string|[string]` was consider for the selected option\n     * conditional statement was use. if the `selectedOptions` is a string, check each of the options' value\n     * is not equal to selectedOptions\n     * else if it is array of string [`string`] or empty array [] then check if each of the options' value is not\n     * included\n     */\n    Selector.prototype.getFilterConditions = function (selectedOptions, option, value) {\n        var removeSelectedOptions;\n        var filterBySearch = option.value.toLowerCase().indexOf(value.toLowerCase()) > -1\n            || option.textContent.toLowerCase().indexOf(value.toLowerCase()) > -1;\n        if ((typeof selectedOptions).toLowerCase() === 'string') {\n            removeSelectedOptions = option.value.trim() !== selectedOptions.trim();\n        }\n        else {\n            removeSelectedOptions = selectedOptions.indexOf(option.value) === -1;\n        }\n        return filterBySearch && removeSelectedOptions;\n    };\n    /**\n     * @name addScrollbar\n     * @param selectID\n     * @param onload\n     * @description\n     * Add scrollbar to the wrapper of the items if it can not contain all the items\n     * Add toggle event for the show and hide items wrapper on the intial call\n     * Add click event to each of the items\n     */\n    Selector.prototype.addScrollbar = function (selectID, onload) {\n        var getCustomMenu = document.querySelector(\"#\" + selectID + \" .select-item-options\");\n        var items = getCustomMenu.querySelectorAll('.wrapper .select-item');\n        try {\n            var optionsMenuProp = getCustomMenu.getBoundingClientRect();\n            var lastItemProp = items[items.length - 1].getBoundingClientRect();\n            var optionsMenuHeight = optionsMenuProp.y + optionsMenuProp.height;\n            var lastItemHeight = lastItemProp.y + lastItemProp.height;\n            if (lastItemHeight > optionsMenuHeight) {\n                getCustomMenu.classList.add('scrollbar');\n            }\n            else {\n                getCustomMenu.classList.remove('scrollbar');\n            }\n        }\n        catch (e) {\n            getCustomMenu.classList.remove('scrollbar');\n        }\n        if (onload) { // initial call\n            // Add click event to the current select element\n            var $this_1 = this;\n            document.querySelector(\"#\" + selectID)\n                .addEventListener('click', function (e) {\n                var customSelect = e.target;\n                if (customSelect.nodeName.toLowerCase() === 'input') {\n                    return false;\n                }\n                /**\n                 * @description\n                 * when select have active class dropdown show else it closes the dropdown\n                 * if the select element contain active class remove the active class\n                 * else add the active class and remove active class\n                 * from other select elements that has active class\n                 */\n                if (this.classList.contains('multiple')) {\n                    // tslint:disable-next-line:no-console\n                    if (customSelect.nodeName.toLowerCase() === 'span'\n                        && customSelect.classList.contains('close')) {\n                        var selectOptions = Array.from(this.nextElementSibling\n                            .querySelectorAll('option[selected]'));\n                        selectOptions.filter(function (option) { return option.textContent === customSelect.parentElement.getAttribute('data-label'); })\n                            .forEach(function (option) {\n                            option.removeAttribute('selected');\n                            customSelect.parentElement.remove();\n                            var searchInput = document.querySelector(\"#\" + selectID + \" .select-item-options input\");\n                            $this_1.rerenderMenuList(selectID, searchInput.value.trim());\n                        });\n                        /**\n                         * If the select remain one\n                         * replace it with the placeholder\n                         * because the remaining element would have been\n                         * remove before the script will run\n                         */\n                        if (selectOptions.length === 1) {\n                            var selectPlaceholder = this.getAttribute('placeholder');\n                            this.children[0].textContent = selectPlaceholder === null ? $this_1.placeholder : selectPlaceholder;\n                        }\n                    }\n                }\n                if (customSelect.classList.contains('select-item')\n                    && customSelect.closest('.wrapper') !== null) {\n                    $this_1.eventListenerHandler(e, selectID);\n                }\n                if (this.classList.contains('active')) {\n                    /**\n                     * if the select elment contain multiple class\n                     * check if the event target is within the\n                     * select element that if the user is still selecting\n                     * more options if not close the dropdown\n                     */\n                    if (!this.classList.contains('multiple')) {\n                        this.classList.remove('active');\n                    }\n                }\n                else {\n                    this.classList.add('active');\n                    // Close other custom select dropdown\n                    document.querySelectorAll(\".select-menu:not(#\" + selectID + \")\")\n                        .forEach(function (item) { return item.classList.remove('active'); });\n                }\n            });\n        }\n        /**\n         * Add Event listener to each of the options of each of the select\n         * this can cause page lagging when each of the select has\n         * close to hundreds of options rather it will be better to use\n         * event delegate to option under their select parent that\n         * =========================================================\n         *     Best Practice because of optimization\n         * =========================================================\n         * if(\n         *      customSelect.classList.contains('select-item') // check if the clicked item has select-item class and\n         *     && customSelect.closest('.wrapper') !== null    // check if clicked item has ancestor with wrapper class\n         * ){ // the conditions are true process this block of code\n         *     this.eventListenerHandler(e as Event, selectID);\n         * }\n         * ==========================================================\n         *     Not recommended for production application\n         * ==========================================================\n         * items.forEach(item => {\n         *     (item.addEventListener as SCAddEventListener)('click', this.eventListenerHandler(event as Event, selectID));\n         * });\n         */\n    };\n    Selector.prototype.getCurrentSelect = function (targetElem) {\n        var wrapper = targetElem.parentNode;\n        var customSelect = wrapper.parentNode.parentNode;\n        return customSelect;\n    };\n    /**\n     * @name addSearchableEvent\n     * @param selectID\n     */\n    Selector.prototype.addSearchableEvent = function (selectID) {\n        var _this = this;\n        var searchInput = document.querySelector(\"#\" + selectID + \" .select-item-options input\");\n        searchInput.addEventListener('input', function (e) {\n            var $this = e.target;\n            var searchValue = $this.value.trim();\n            _this.rerenderMenuList(selectID, searchValue);\n        });\n    };\n    Selector.prototype.getCurrentSelectElement = function (selectID) {\n        var currentCustomSelect = document.querySelector(\"div#\" + selectID);\n        var selectOptions = currentCustomSelect.nextElementSibling;\n        return selectOptions;\n    };\n    Selector.prototype.rerenderMenuList = function (selectID, searchValue) {\n        if (searchValue === void 0) { searchValue = ''; }\n        var selectOptions = this.getCurrentSelectElement(selectID);\n        var menuOptions = Array.from(selectOptions.querySelectorAll('option'));\n        this.generateCustomMenu(selectOptions, menuOptions, selectID, searchValue);\n    };\n    return Selector;\n}());\nexports.default = Selector;\n// interface IElement extends Element {\n//     mozMatchesSelector(selectors: string): boolean;\n//     msMatchesSelector(selectors: string): boolean;\n// }\n// declare let SCElement: {\n//     prototype: IElement;\n//     new(): IElement;\n// }\n// if (!('matches' in  SCElement)) {\n//     SCElement.prototype.matches = SCElement.prototype.msMatchesSelector || \n//                                 SCElement.prototype.mozMatchesSelector ||\n//                                 SCElement.prototype.webkitMatchesSelector;\n//     if(\n//         !('msMatchesSelector' in SCElement)\n//         && !('mozMatchesSelector' in SCElement)\n//         && !('webkitMatchesSelector' in SCElement)\n//     ){\n//         SCElement.prototype.matches = function(sel: string): boolean{\n//                                         const elm = this;\n//                                         const elems = (elm.ownerDocument as Document).querySelectorAll(sel);\n//                                         let index = 0;\n//                                         while (elems[index] && elems[index] !== elm) {\n//                                             ++index;\n//                                         }\n//                                         return Boolean(elems[index]);\n//                                     };\n//         }\n// }\n//   if (!('closest' in SCElement)) {\n//     SCElement.prototype.closest = function(s: string) {\n//       let el = this;\n//       do {\n//         if (el.matches(s)){\n//             return el;\n//         }\n//         el = (el.parentElement || el.parentNode) as IElement;\n//       } while (el !== null && el.nodeType === 1);\n//       return null;\n//     };\n//   }\n// export {SCAddEventListener}\nwindow.Selector = Selector;\n\n\n//# sourceURL=webpack:///./src/index.ts?");

/***/ }),

/***/ "./src/sass/main.scss":
/*!****************************!*\
  !*** ./src/sass/main.scss ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin\n\n//# sourceURL=webpack:///./src/sass/main.scss?");

/***/ }),

/***/ 0:
/*!*************************************************!*\
  !*** multi ./src/index.ts ./src/sass/main.scss ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! ./src/index.ts */\"./src/index.ts\");\nmodule.exports = __webpack_require__(/*! ./src/sass/main.scss */\"./src/sass/main.scss\");\n\n\n//# sourceURL=webpack:///multi_./src/index.ts_./src/sass/main.scss?");

/***/ })

/******/ });